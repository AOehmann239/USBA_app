{"ast":null,"code":"var _jsxFileName = \"/Users/andrewoehmann/sei/projects/bank_app/USBA_client/src/components/expenses/IndexExpenses.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { getAllExpenses } from '../../api/expenses';\nimport { Card, Table } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { indexExpensesSuccess, indexExpensesFailure } from '../shared/AutoDismissAlert/messages'; // I'm going to declare a style object\n// this will be used to corral my cards\n// we can use basic CSS, but we have to use JS syntax\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst padTo2Digits = num => {\n  return num.toString().padStart(2, '0');\n};\n\nconst formatDate = date => {\n  return [padTo2Digits(date.getMonth() + 1), padTo2Digits(date.getDate()), date.getFullYear()].join('/');\n};\n\nconst IndexExpenses = props => {\n  _s();\n\n  const [expenses, setExpenses] = useState(null);\n  const {\n    user,\n    msgAlert\n  } = props;\n  useEffect(() => {\n    getAllExpenses().then(res => {\n      setExpenses(res.data.expenses);\n    }).then(() => {\n      msgAlert({\n        heading: 'Found some expenses!',\n        message: indexExpensesSuccess,\n        variant: 'success'\n      });\n    }).catch(() => {\n      msgAlert({\n        heading: 'No expenses?!!',\n        message: indexExpensesFailure,\n        variant: 'danger'\n      });\n    });\n  }, []);\n\n  if (!expenses) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 16\n    }, this);\n  } else if (expenses.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"no expenses yet, go add some\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 16\n    }, this);\n  } // let expenseCards\n  // if (expenses.length > 0) {\n  //     expenseCards = expenses.map(expense => (\n  //         // one method of styling, usually reserved for a single style\n  //         // we can use inline, just like in html\n  //         <Card key={expense.id} style={{ width: '30%' }} className=\"m-2\">\n  //             <Card.Header>${expense.amount}</Card.Header>\n  //             <Card.Header>{expense.vendor}</Card.Header>\n  //             <Card.Body>\n  //                 <Card.Text>\n  //                     <Link to={`/expenses/${expense._id}`}>More info</Link>\n  //                 </Card.Text>\n  //             </Card.Body>\n  //         </Card>\n  //     ))\n  // }\n  // return (\n  //     <>\n  //         <h3>All the expenses</h3>\n  //         <div style={cardContainerLayout}>\n  //             {expenseCards}\n  //         </div>\n  //     </>\n  // )\n\n\n  let expenseTableItems;\n\n  if (expenses.length > 0) {\n    expenseTableItems = expenses.map(expense =>\n    /*#__PURE__*/\n    // one method of styling, usually reserved for a single style\n    // we can use inline, just like in html\n    _jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n        children: formatDate(expense.date)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: expense.vendor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: [\"$\", expense.amount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: `/expenses/${expense._id}`,\n          children: \"More info\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this));\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"All the expenses\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      striped: true,\n      bordered: true,\n      hover: true,\n      variant: \"dark\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Vendor\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Amount\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: expenseTableItems\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(IndexExpenses, \"8iwiucXU+btIzRSKuqfN7oPeIBw=\");\n\n_c = IndexExpenses;\nexport default IndexExpenses;\n\nvar _c;\n\n$RefreshReg$(_c, \"IndexExpenses\");","map":{"version":3,"sources":["/Users/andrewoehmann/sei/projects/bank_app/USBA_client/src/components/expenses/IndexExpenses.js"],"names":["React","useState","useEffect","getAllExpenses","Card","Table","Link","indexExpensesSuccess","indexExpensesFailure","padTo2Digits","num","toString","padStart","formatDate","date","getMonth","getDate","getFullYear","join","IndexExpenses","props","expenses","setExpenses","user","msgAlert","then","res","data","heading","message","variant","catch","length","expenseTableItems","map","expense","vendor","amount","_id"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { getAllExpenses } from '../../api/expenses'\nimport { Card, Table } from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\nimport {indexExpensesSuccess, indexExpensesFailure} from '../shared/AutoDismissAlert/messages'\n\n// I'm going to declare a style object\n// this will be used to corral my cards\n// we can use basic CSS, but we have to use JS syntax\nconst padTo2Digits = (num) => {\n    return num.toString().padStart(2, '0')\n}\n\nconst formatDate = (date) => {\n    return [\n        padTo2Digits(date.getMonth() + 1),\n        padTo2Digits(date.getDate()),\n        date.getFullYear(),\n      ].join('/');\n}\n\nconst IndexExpenses = (props) => {\n    const [expenses, setExpenses] = useState(null)\n\n    const {user, msgAlert} = props\n\n    useEffect(() => {\n        getAllExpenses()\n            .then(res => {\n                setExpenses(res.data.expenses)\n            })\n            .then(() => {\n                msgAlert({\n                    heading: 'Found some expenses!',\n                    message: indexExpensesSuccess,\n                    variant: 'success',\n                })\n            })\n            .catch(() => {\n                msgAlert({\n                    heading: 'No expenses?!!',\n                    message: indexExpensesFailure,\n                    variant: 'danger',\n                })\n            })\n    }, [])\n\n    if (!expenses) {\n        return <p>loading...</p>\n    } else if (expenses.length === 0) {\n        return <p>no expenses yet, go add some</p>\n    }\n\n    // let expenseCards\n\n    // if (expenses.length > 0) {\n    //     expenseCards = expenses.map(expense => (\n    //         // one method of styling, usually reserved for a single style\n    //         // we can use inline, just like in html\n    //         <Card key={expense.id} style={{ width: '30%' }} className=\"m-2\">\n    //             <Card.Header>${expense.amount}</Card.Header>\n    //             <Card.Header>{expense.vendor}</Card.Header>\n    //             <Card.Body>\n    //                 <Card.Text>\n    //                     <Link to={`/expenses/${expense._id}`}>More info</Link>\n    //                 </Card.Text>\n    //             </Card.Body>\n    //         </Card>\n    //     ))\n    // }\n\n    // return (\n    //     <>\n    //         <h3>All the expenses</h3>\n    //         <div style={cardContainerLayout}>\n    //             {expenseCards}\n    //         </div>\n    //     </>\n    // )\n    let expenseTableItems\n\n if (expenses.length > 0) {\n     expenseTableItems = expenses.map(expense => (\n         // one method of styling, usually reserved for a single style\n         // we can use inline, just like in html\n            <tr>\n                <td>{formatDate(expense.date)}</td>\n                <td>{expense.vendor}</td>\n                <td>${expense.amount}</td>\n                <td><Link to={`/expenses/${expense._id}`}>More info</Link></td>\n            </tr>\n    ))\n}\n\nreturn (\n    <>\n        <h3>All the expenses</h3>\n        <Table striped bordered hover variant=\"dark\">\n            <thead>\n                <tr>\n                    <th>Date</th>\n                    <th>Vendor</th>\n                    <th>Amount</th>\n                    <th></th>\n                </tr>\n            </thead>\n            <tbody>\n                {expenseTableItems}\n            </tbody>\n        </Table>\n    </>\n)\n}\n\nexport default IndexExpenses\n\n "]},"metadata":{},"sourceType":"module"}