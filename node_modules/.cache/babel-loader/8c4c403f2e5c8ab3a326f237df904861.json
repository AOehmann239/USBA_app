{"ast":null,"code":"var _jsxFileName = \"/Users/andrewoehmann/sei/projects/bank_app/USBA_client/src/components/expenses/CreateExpense.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Form, Container, Button } from 'react-bootstrap';\nimport { createExpense } from '../../api/expenses';\nimport { createExpenseSuccess, createExpenseFailure } from '../shared/AutoDismissAlert/messages';\nimport { useNavigate } from 'react-router-dom';\nimport ExpenseForm from '../shared/ExpenseForm'; // create expense renders a form and calls createExpense function\n// maybe redirect(navigate) to the new expense show page\n// props we'll need are user, msgAlert\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CreateExpense = props => {\n  _s();\n\n  const {\n    user,\n    msgAlert\n  } = props;\n  console.log('user in create', user);\n  const navigate = useNavigate(); // we'll need two states\n\n  const [expense, setExpense] = useState({\n    amount: '',\n    vendor: '',\n    category: '',\n    description: '',\n    date: ''\n  });\n  console.log('expense in create', expense); //  an empty expense object\n  // and a createdId (used to navigate)\n  // we'll need handleChange and handleSubmit funcs\n\n  const handleChange = e => {\n    // e === event\n    e.persist();\n    setExpense(prevExpense => {\n      const name = e.target.name;\n      let value = e.target.value;\n      console.log('etarget type', e.target.type);\n      console.log('this is e.target checked', e.target.checked);\n\n      if (e.target.type === 'number') {\n        value = parseInt(e.target.value);\n      }\n\n      const updatedValue = {\n        [name]: value\n      };\n      console.log('prevExpense', prevExpense);\n      console.log('updatedValue', updatedValue);\n      return { ...prevExpense,\n        ...updatedValue\n      };\n    });\n  };\n\n  const handleSubmit = e => {\n    // e === event\n    e.preventDefault();\n    createExpense(user, expense) // if create is successful, we should navigate to the show page\n    .then(res => {\n      navigate(`/expenses/${res.data.expense._id}`);\n    }) // then we send a success message\n    .then(() => msgAlert({\n      heading: 'Expense Added! Success!',\n      message: createExpenseSuccess,\n      variant: 'success'\n    })) // if there is an error, we'll send an error message\n    .catch(() => msgAlert({\n      heading: 'Oh No!',\n      message: createExpenseFailure,\n      variant: 'danger'\n    })); // console.log('this is the expense', expense)\n  };\n\n  return /*#__PURE__*/_jsxDEV(ExpenseForm, {\n    expense: expense,\n    handleChange: handleChange,\n    handleSubmit: handleSubmit,\n    heading: \"Add new expense!\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CreateExpense, \"0vf8zryH2F5QqijqVaiwXWmAIeQ=\", false, function () {\n  return [useNavigate];\n});\n\n_c = CreateExpense;\nexport default CreateExpense;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateExpense\");","map":{"version":3,"sources":["/Users/andrewoehmann/sei/projects/bank_app/USBA_client/src/components/expenses/CreateExpense.js"],"names":["React","useState","Form","Container","Button","createExpense","createExpenseSuccess","createExpenseFailure","useNavigate","ExpenseForm","CreateExpense","props","user","msgAlert","console","log","navigate","expense","setExpense","amount","vendor","category","description","date","handleChange","e","persist","prevExpense","name","target","value","type","checked","parseInt","updatedValue","handleSubmit","preventDefault","then","res","data","_id","heading","message","variant","catch"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,IAAT,EAAeC,SAAf,EAA0BC,MAA1B,QAAwC,iBAAxC;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,SAAQC,oBAAR,EAA8BC,oBAA9B,QAAyD,qCAAzD;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,OAAOC,WAAP,MAAwB,uBAAxB,C,CAEA;AACA;AACA;;;;AACA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAAA;;AAC7B,QAAM;AAACC,IAAAA,IAAD;AAAOC,IAAAA;AAAP,MAAmBF,KAAzB;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BH,IAA9B;AACA,QAAMI,QAAQ,GAAGR,WAAW,EAA5B,CAH6B,CAI7B;;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBjB,QAAQ,CAAC;AAACkB,IAAAA,MAAM,EAAE,EAAT;AAAaC,IAAAA,MAAM,EAAE,EAArB;AAAyBC,IAAAA,QAAQ,EAAE,EAAnC;AAAuCC,IAAAA,WAAW,EAAE,EAApD;AAAwDC,IAAAA,IAAI,EAAE;AAA9D,GAAD,CAAtC;AACAT,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCE,OAAjC,EAN6B,CAO7B;AACA;AACA;;AACA,QAAMO,YAAY,GAAIC,CAAD,IAAO;AACxB;AACAA,IAAAA,CAAC,CAACC,OAAF;AAEAR,IAAAA,UAAU,CAACS,WAAW,IAAI;AACtB,YAAMC,IAAI,GAAGH,CAAC,CAACI,MAAF,CAASD,IAAtB;AACA,UAAIE,KAAK,GAAGL,CAAC,CAACI,MAAF,CAASC,KAArB;AACAhB,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BU,CAAC,CAACI,MAAF,CAASE,IAArC;AACAjB,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCU,CAAC,CAACI,MAAF,CAASG,OAAjD;;AAEA,UAAIP,CAAC,CAACI,MAAF,CAASE,IAAT,KAAkB,QAAtB,EAAgC;AAC5BD,QAAAA,KAAK,GAAGG,QAAQ,CAACR,CAAC,CAACI,MAAF,CAASC,KAAV,CAAhB;AACH;;AAED,YAAMI,YAAY,GAAG;AAAE,SAACN,IAAD,GAAQE;AAAV,OAArB;AAEAhB,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BY,WAA3B;AACAb,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BmB,YAA5B;AAEA,aAAO,EAAC,GAAGP,WAAJ;AAAiB,WAAGO;AAApB,OAAP;AACH,KAhBS,CAAV;AAiBH,GArBD;;AAuBA,QAAMC,YAAY,GAAIV,CAAD,IAAO;AACxB;AACAA,IAAAA,CAAC,CAACW,cAAF;AAEA/B,IAAAA,aAAa,CAACO,IAAD,EAAOK,OAAP,CAAb,CACI;AADJ,KAEKoB,IAFL,CAEUC,GAAG,IAAI;AAACtB,MAAAA,QAAQ,CAAE,aAAYsB,GAAG,CAACC,IAAJ,CAAStB,OAAT,CAAiBuB,GAAI,EAAnC,CAAR;AAA8C,KAFhE,EAGI;AAHJ,KAIKH,IAJL,CAIU,MACFxB,QAAQ,CAAC;AACL4B,MAAAA,OAAO,EAAE,yBADJ;AAELC,MAAAA,OAAO,EAAEpC,oBAFJ;AAGLqC,MAAAA,OAAO,EAAE;AAHJ,KAAD,CALhB,EAUI;AAVJ,KAWKC,KAXL,CAWW,MACH/B,QAAQ,CAAC;AACL4B,MAAAA,OAAO,EAAE,QADJ;AAELC,MAAAA,OAAO,EAAEnC,oBAFJ;AAGLoC,MAAAA,OAAO,EAAE;AAHJ,KAAD,CAZhB,EAJwB,CAqBxB;AACH,GAtBD;;AAwBA,sBACI,QAAC,WAAD;AACA,IAAA,OAAO,EAAE1B,OADT;AAEI,IAAA,YAAY,EAAEO,YAFlB;AAGI,IAAA,YAAY,EAAEW,YAHlB;AAII,IAAA,OAAO,EAAC;AAJZ;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CAjED;;GAAMzB,a;UAGeF,W;;;KAHfE,a;AAmEN,eAAeA,aAAf","sourcesContent":["import React, { useState } from 'react'\nimport { Form, Container, Button } from 'react-bootstrap'\nimport { createExpense } from '../../api/expenses'\nimport {createExpenseSuccess, createExpenseFailure} from '../shared/AutoDismissAlert/messages'\nimport { useNavigate } from 'react-router-dom'\nimport ExpenseForm from '../shared/ExpenseForm'\n\n// create expense renders a form and calls createExpense function\n// maybe redirect(navigate) to the new expense show page\n// props we'll need are user, msgAlert\nconst CreateExpense = (props) => {\n    const {user, msgAlert} = props\n    console.log('user in create', user)\n    const navigate = useNavigate()\n    // we'll need two states\n    const [expense, setExpense] = useState({amount: '', vendor: '', category: '', description: '', date: ''})\n    console.log('expense in create', expense)\n    //  an empty expense object\n    // and a createdId (used to navigate)\n    // we'll need handleChange and handleSubmit funcs\n    const handleChange = (e) => {\n        // e === event\n        e.persist()\n\n        setExpense(prevExpense => {\n            const name = e.target.name\n            let value = e.target.value\n            console.log('etarget type', e.target.type)\n            console.log('this is e.target checked', e.target.checked)\n\n            if (e.target.type === 'number') {\n                value = parseInt(e.target.value)\n            }\n\n            const updatedValue = { [name]: value }\n\n            console.log('prevExpense', prevExpense)\n            console.log('updatedValue', updatedValue)\n\n            return {...prevExpense, ...updatedValue}\n        })\n    }\n\n    const handleSubmit = (e) => {\n        // e === event\n        e.preventDefault()\n\n        createExpense(user, expense)\n            // if create is successful, we should navigate to the show page\n            .then(res => {navigate(`/expenses/${res.data.expense._id}`)})\n            // then we send a success message\n            .then(() =>\n                msgAlert({\n                    heading: 'Expense Added! Success!',\n                    message: createExpenseSuccess,\n                    variant: 'success',\n                }))\n            // if there is an error, we'll send an error message\n            .catch(() =>\n                msgAlert({\n                    heading: 'Oh No!',\n                    message: createExpenseFailure,\n                    variant: 'danger',\n                }))\n        // console.log('this is the expense', expense)\n    }\n\n    return (\n        <ExpenseForm \n        expense={expense}\n            handleChange={handleChange}\n            handleSubmit={handleSubmit}\n            heading=\"Add new expense!\"\n        />\n    )\n}\n\nexport default CreateExpense"]},"metadata":{},"sourceType":"module"}