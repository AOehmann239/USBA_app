{"ast":null,"code":"var _jsxFileName = \"/Users/andrewoehmann/sei/projects/bank_app/USBA_client/src/components/expenses/IndexExpenses.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { getAllExpenses } from '../../api/expenses';\nimport { Card } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { indexExpensesSuccess, indexExpensesFailure } from '../shared/AutoDismissAlert/messages'; // I'm going to declare a style object\n// this will be used to corral my cards\n// we can use basic CSS, but we have to use JS syntax\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst cardContainerLayout = {\n  display: 'flex',\n  justifyContent: 'center',\n  flexFlow: 'row wrap'\n};\n\nconst IndexExpenses = props => {\n  _s();\n\n  const [expenses, setExpenses] = useState(null);\n  const {\n    user,\n    msgAlert\n  } = props;\n  useEffect(() => {\n    getAllExpenses().then(res => {\n      setExpenses(res.data.expenses);\n    }).then(() => {\n      msgAlert({\n        heading: 'Found some expenses!',\n        message: indexExpensesSuccess,\n        variant: 'success'\n      });\n    }).catch(() => {\n      msgAlert({\n        heading: 'No expenses?!!',\n        message: indexExpensesFailure,\n        variant: 'danger'\n      });\n    });\n  }, []);\n\n  if (!expenses) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 16\n    }, this);\n  } else if (expenses.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"no expenses yet, go add some\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 16\n    }, this);\n  }\n\n  let expenseCards;\n\n  if (expenses.length > 0) {\n    expenseCards = vs.map(expense =>\n    /*#__PURE__*/\n    // one method of styling, usually reserved for a single style\n    // we can use inline, just like in html\n    _jsxDEV(Card, {\n      style: {\n        width: '30%'\n      },\n      className: \"m-2\",\n      children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n        children: expense.fullTitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n        children: /*#__PURE__*/_jsxDEV(Card.Text, {\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: `/expenses/${expense.id}`,\n            children: [\"View \", expense.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this)]\n    }, expense.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this));\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"All the expenses\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: cardContainerLayout,\n      children: expenseCards\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(IndexExpenses, \"8iwiucXU+btIzRSKuqfN7oPeIBw=\");\n\n_c = IndexExpenses;\nexport default IndexExpenses;\n\nvar _c;\n\n$RefreshReg$(_c, \"IndexExpenses\");","map":{"version":3,"sources":["/Users/andrewoehmann/sei/projects/bank_app/USBA_client/src/components/expenses/IndexExpenses.js"],"names":["React","useState","useEffect","getAllExpenses","Card","Link","indexExpensesSuccess","indexExpensesFailure","cardContainerLayout","display","justifyContent","flexFlow","IndexExpenses","props","expenses","setExpenses","user","msgAlert","then","res","data","heading","message","variant","catch","length","expenseCards","vs","map","expense","width","fullTitle","id","name"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,cAAT,QAA+B,oBAA/B;AACA,SAASC,IAAT,QAAqB,iBAArB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAAQC,oBAAR,EAA8BC,oBAA9B,QAAyD,qCAAzD,C,CAEA;AACA;AACA;;;;AACA,MAAMC,mBAAmB,GAAG;AACxBC,EAAAA,OAAO,EAAE,MADe;AAExBC,EAAAA,cAAc,EAAE,QAFQ;AAGxBC,EAAAA,QAAQ,EAAE;AAHc,CAA5B;;AAMA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAAA;;AAC7B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0Bd,QAAQ,CAAC,IAAD,CAAxC;AAEA,QAAM;AAACe,IAAAA,IAAD;AAAOC,IAAAA;AAAP,MAAmBJ,KAAzB;AAEAX,EAAAA,SAAS,CAAC,MAAM;AACZC,IAAAA,cAAc,GACTe,IADL,CACUC,GAAG,IAAI;AACTJ,MAAAA,WAAW,CAACI,GAAG,CAACC,IAAJ,CAASN,QAAV,CAAX;AACH,KAHL,EAIKI,IAJL,CAIU,MAAM;AACRD,MAAAA,QAAQ,CAAC;AACLI,QAAAA,OAAO,EAAE,sBADJ;AAELC,QAAAA,OAAO,EAAEhB,oBAFJ;AAGLiB,QAAAA,OAAO,EAAE;AAHJ,OAAD,CAAR;AAKH,KAVL,EAWKC,KAXL,CAWW,MAAM;AACTP,MAAAA,QAAQ,CAAC;AACLI,QAAAA,OAAO,EAAE,gBADJ;AAELC,QAAAA,OAAO,EAAEf,oBAFJ;AAGLgB,QAAAA,OAAO,EAAE;AAHJ,OAAD,CAAR;AAKH,KAjBL;AAkBH,GAnBQ,EAmBN,EAnBM,CAAT;;AAqBA,MAAI,CAACT,QAAL,EAAe;AACX,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAFD,MAEO,IAAIA,QAAQ,CAACW,MAAT,KAAoB,CAAxB,EAA2B;AAC9B,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAED,MAAIC,YAAJ;;AAEA,MAAIZ,QAAQ,CAACW,MAAT,GAAkB,CAAtB,EAAyB;AACrBC,IAAAA,YAAY,GAAGC,EAAE,CAACC,GAAH,CAAOC,OAAO;AAAA;AACzB;AACA;AACA,YAAC,IAAD;AAAuB,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAA9B;AAAgD,MAAA,SAAS,EAAC,KAA1D;AAAA,8BACI,QAAC,IAAD,CAAM,MAAN;AAAA,kBAAcD,OAAO,CAACE;AAAtB;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,IAAD,CAAM,IAAN;AAAA,+BACI,QAAC,IAAD,CAAM,IAAN;AAAA,iCACI,QAAC,IAAD;AAAM,YAAA,EAAE,EAAG,aAAYF,OAAO,CAACG,EAAG,EAAlC;AAAA,gCAA2CH,OAAO,CAACI,IAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA,OAAWJ,OAAO,CAACG,EAAnB;AAAA;AAAA;AAAA;AAAA,YAHW,CAAf;AAYH;;AAED,sBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,KAAK,EAAExB,mBAAZ;AAAA,gBACKkB;AADL;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA,kBADJ;AAQH,CAzDD;;GAAMd,a;;KAAAA,a;AA2DN,eAAeA,aAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { getAllExpenses } from '../../api/expenses'\nimport { Card } from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\nimport {indexExpensesSuccess, indexExpensesFailure} from '../shared/AutoDismissAlert/messages'\n\n// I'm going to declare a style object\n// this will be used to corral my cards\n// we can use basic CSS, but we have to use JS syntax\nconst cardContainerLayout = {\n    display: 'flex',\n    justifyContent: 'center',\n    flexFlow: 'row wrap'\n}\n\nconst IndexExpenses = (props) => {\n    const [expenses, setExpenses] = useState(null)\n\n    const {user, msgAlert} = props\n\n    useEffect(() => {\n        getAllExpenses()\n            .then(res => {\n                setExpenses(res.data.expenses)\n            })\n            .then(() => {\n                msgAlert({\n                    heading: 'Found some expenses!',\n                    message: indexExpensesSuccess,\n                    variant: 'success',\n                })\n            })\n            .catch(() => {\n                msgAlert({\n                    heading: 'No expenses?!!',\n                    message: indexExpensesFailure,\n                    variant: 'danger',\n                })\n            })\n    }, [])\n\n    if (!expenses) {\n        return <p>loading...</p>\n    } else if (expenses.length === 0) {\n        return <p>no expenses yet, go add some</p>\n    }\n\n    let expenseCards\n\n    if (expenses.length > 0) {\n        expenseCards = vs.map(expense => (\n            // one method of styling, usually reserved for a single style\n            // we can use inline, just like in html\n            <Card key={expense.id} style={{ width: '30%' }} className=\"m-2\">\n                <Card.Header>{expense.fullTitle}</Card.Header>\n                <Card.Body>\n                    <Card.Text>\n                        <Link to={`/expenses/${expense.id}`}>View {expense.name}</Link>\n                    </Card.Text>\n                </Card.Body>\n            </Card>\n        ))\n    }\n\n    return (\n        <>\n            <h3>All the expenses</h3>\n            <div style={cardContainerLayout}>\n                {expenseCards}\n            </div>\n        </>\n    )\n}\n\nexport default IndexExpenses"]},"metadata":{},"sourceType":"module"}