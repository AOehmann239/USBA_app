{"ast":null,"code":"var _jsxFileName = \"/Users/andrewoehmann/sei/projects/bank_app/USBA_client/src/components/deposits/CreateDeposit.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Form, Container, Button } from 'react-bootstrap';\nimport { createDeposit } from '../../api/deposits';\nimport { createDepositSuccess, createDepositFailure } from '../shared/AutoDismissAlert/messages';\nimport { useNavigate } from 'react-router-dom';\nimport DepositForm from '../shared/DepositForm'; // create deposit renders a form and calls createDeposit function\n// maybe redirect(navigate) to the new deposit show page\n// props we'll need are user, msgAlert\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CreateDeposit = props => {\n  _s();\n\n  const {\n    user,\n    msgAlert\n  } = props;\n  console.log('user in create', user);\n  const navigate = useNavigate(); // we'll need two states\n\n  const [deposit, setDeposit] = useState({\n    amount: '',\n    description: ''\n  });\n  console.log('deposit in create', deposit); //  an empty deposit object\n  // and a createdId (used to navigate)\n  // we'll need handleChange and handleSubmit funcs\n\n  const handleChange = e => {\n    // e === event\n    e.persist();\n    setDeposit(prevDeposit => {\n      const name = e.target.name;\n      let value = e.target.value;\n      console.log('etarget type', e.target.type);\n      console.log('this is e.target checked', e.target.checked);\n\n      if (e.target.type === 'number') {\n        value = parseInt(e.target.value);\n      }\n\n      const updatedValue = {\n        [name]: value\n      };\n      console.log('prevDeposit', prevDeposit);\n      console.log('updatedValue', updatedValue);\n      return { ...prevDeposit,\n        ...updatedValue\n      };\n    });\n  };\n\n  const handleSubmit = e => {\n    // e === event\n    e.preventDefault();\n    createDeposit(user, deposit) // if create is successful, we should navigate to the show page\n    .then(res => {\n      navigate(`/deposits/${res.data.deposit._id}`);\n    }) // then we send a success message\n    .then(() => msgAlert({\n      heading: 'Deposit Added! Success!',\n      message: createDepositSuccess,\n      variant: 'success'\n    })) // if there is an error, we'll send an error message\n    .catch(() => msgAlert({\n      heading: 'Oh No!',\n      message: createDepositFailure,\n      variant: 'danger'\n    })); // console.log('this is the deposit', deposit)\n  };\n\n  return /*#__PURE__*/_jsxDEV(DepositForm, {\n    deposit: deposit,\n    handleChange: handleChange,\n    handleSubmit: handleSubmit,\n    heading: \"Add new deposit!\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CreateDeposit, \"xJXOB3RfpCR7gB15VnVu5ZC2D1E=\", false, function () {\n  return [useNavigate];\n});\n\n_c = CreateDeposit;\nexport default CreateDeposit;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateDeposit\");","map":{"version":3,"sources":["/Users/andrewoehmann/sei/projects/bank_app/USBA_client/src/components/deposits/CreateDeposit.js"],"names":["React","useState","Form","Container","Button","createDeposit","createDepositSuccess","createDepositFailure","useNavigate","DepositForm","CreateDeposit","props","user","msgAlert","console","log","navigate","deposit","setDeposit","amount","description","handleChange","e","persist","prevDeposit","name","target","value","type","checked","parseInt","updatedValue","handleSubmit","preventDefault","then","res","data","_id","heading","message","variant","catch"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { Form, Container, Button } from 'react-bootstrap'\nimport { createDeposit } from '../../api/deposits'\nimport {createDepositSuccess, createDepositFailure} from '../shared/AutoDismissAlert/messages'\nimport { useNavigate } from 'react-router-dom'\nimport DepositForm from '../shared/DepositForm'\n\n// create deposit renders a form and calls createDeposit function\n// maybe redirect(navigate) to the new deposit show page\n// props we'll need are user, msgAlert\nconst CreateDeposit = (props) => {\n    const {user, msgAlert} = props\n    console.log('user in create', user)\n    const navigate = useNavigate()\n    // we'll need two states\n    const [deposit, setDeposit] = useState({amount: '', description: '',})\n    console.log('deposit in create', deposit)\n    //  an empty deposit object\n    // and a createdId (used to navigate)\n    // we'll need handleChange and handleSubmit funcs\n    const handleChange = (e) => {\n        // e === event\n        e.persist()\n\n        setDeposit(prevDeposit => {\n            const name = e.target.name\n            let value = e.target.value\n            console.log('etarget type', e.target.type)\n            console.log('this is e.target checked', e.target.checked)\n\n            if (e.target.type === 'number') {\n                value = parseInt(e.target.value)\n            }\n\n            const updatedValue = { [name]: value }\n\n            console.log('prevDeposit', prevDeposit)\n            console.log('updatedValue', updatedValue)\n\n            return {...prevDeposit, ...updatedValue}\n        })\n    }\n\n    const handleSubmit = (e) => {\n        // e === event\n        e.preventDefault()\n\n        createDeposit(user, deposit)\n            // if create is successful, we should navigate to the show page\n            .then(res => {navigate(`/deposits/${res.data.deposit._id}`)})\n            // then we send a success message\n            .then(() =>\n                msgAlert({\n                    heading: 'Deposit Added! Success!',\n                    message: createDepositSuccess,\n                    variant: 'success',\n                }))\n            // if there is an error, we'll send an error message\n            .catch(() =>\n                msgAlert({\n                    heading: 'Oh No!',\n                    message: createDepositFailure,\n                    variant: 'danger',\n                }))\n        // console.log('this is the deposit', deposit)\n    }\n\n    return (\n        <DepositForm \n        deposit={deposit}\n            handleChange={handleChange}\n            handleSubmit={handleSubmit}\n            heading=\"Add new deposit!\"\n        />\n    )\n}\n\nexport default CreateDeposit"]},"metadata":{},"sourceType":"module"}