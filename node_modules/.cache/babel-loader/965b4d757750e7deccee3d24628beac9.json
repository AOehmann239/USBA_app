{"ast":null,"code":"var _jsxFileName = \"/Users/andrewoehmann/sei/projects/bank_app/USBA_client/src/components/expenses/ExpensesByCategory.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useTable, useSortBy } from 'react-table';\nimport { getAllExpenses } from '../../api/expenses';\nimport { Card, Table, Button } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { indexExpensesSuccess, indexExpensesFailure } from '../shared/AutoDismissAlert/messages'; // I'm going to declare a style object\n// this will be used to corral my cards\n// we can use basic CSS, but we have to use JS syntax\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ExpensesByCategory = props => {\n  _s();\n\n  const [expenses, setExpenses] = useState(null);\n  const [order, setorder] = useState('ASC');\n  const {\n    user,\n    msgAlert\n  } = props;\n  useEffect(() => {\n    getAllExpenses().then(res => {\n      setExpenses(res.data.expenses);\n    }).then(() => {\n      msgAlert({\n        heading: 'Found some expenses!',\n        message: indexExpensesSuccess,\n        variant: 'success'\n      });\n    }).catch(() => {\n      msgAlert({\n        heading: 'No expenses?!!',\n        message: indexExpensesFailure,\n        variant: 'danger'\n      });\n    });\n  }, []);\n\n  if (!expenses) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 16\n    }, this);\n  } else if (expenses.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"no expenses yet, go add some\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 16\n    }, this);\n  }\n\n  const padTo2Digits = num => {\n    return num.toString().padStart(2, '0');\n  };\n\n  const formatDate = date => {\n    return [padTo2Digits(date.getMonth() + 1), padTo2Digits(date.getDate()), date.getFullYear()].join('/');\n  };\n\n  let expenseTableItems;\n  let totalRentExp = 0;\n  let totalTranspExp = 0;\n  let totalGroceryExp = 0;\n  let totalUnnecessaryExp = 0;\n  let totalNecessaryExp = 0;\n  let totalOtherExp = 0;\n  let totalInvestExp = 0;\n  expenses.forEach(expense => {\n    if (expense.category === \"rent/utilities/phone\") {\n      totalRentExp += expense.amount;\n    }\n\n    if (expense.category === \"car/transportation/gas\") {\n      totalTranspExp += expense.amount;\n    }\n\n    if (expense.category === \"groceries\") {\n      totalGroceryExp += expense.amount;\n    }\n\n    if (expense.category === \"personal necessary\") {\n      totalNecessaryExp += expense.amount;\n    }\n\n    if (expense.category === \"personal unnecessary\") {\n      totalUnnecessaryExp += expense.amount;\n    }\n\n    if (expense.category === \"other\") {\n      totalOtherExp += expense.amount;\n    }\n\n    if (expense.category === \"investment\") {\n      totalInvestExp += expense.amount;\n    }\n  });\n\n  if (expenses.length > 0) {\n    expenseTableItems = expenses.map(expense =>\n    /*#__PURE__*/\n    // one method of styling, usually reserved for a single style\n    // we can use inline, just like in html\n    _jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n        children: formatDate(new Date(expense.date))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: expense.vendor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: [\"$\", expense.amount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: `/expenses/${expense._id}`,\n          children: \"More info\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 21\n      }, this)]\n    }, expense.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }, this));\n  } // const sorting = (col) => {\n  //     if (order === 'ASC'){\n  //         const sorted = [...expenses].sort((a, b) =>\n  //             a[col].toLowerCase() > b[col].toLowerCase() ? 1 : -1);\n  //         getAllExpenses(sorted)\n  //         setorder('DSC')\n  //     }\n  //     if (order === 'DSC'){\n  //         const sorted = [...expenses].sort((a, b) =>\n  //             a[col].toLowerCase() < b[col].toLowerCase() ? 1 : -1)\n  //         getAllExpenses(sorted)\n  //         setorder('ASC')\n  //     }\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"page-title\",\n      children: \"All the expenses\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      striped: true,\n      bordered: true,\n      hover: true,\n      variant: \"dark\",\n      id: \"myTable\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Vendor\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Amount\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: expenseTableItems\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Rent/Utilities/Phone: $\", totalRentExp]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Car/Transportation/Gas: $\", totalTranspExp]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Groceries: $\", totalGroceryExp]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Personal Necessary: $\", totalNecessaryExp]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Personal Unnecessary: $\", totalUnnecessaryExp]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Other: $\", totalOtherExp]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Investment: $\", totalInvestExp]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ExpensesByCategory, \"LvycXTqqhQmtLC5bCkkl3w/fKMU=\");\n\n_c = ExpensesByCategory;\nexport default ExpensesByCategory;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpensesByCategory\");","map":{"version":3,"sources":["/Users/andrewoehmann/sei/projects/bank_app/USBA_client/src/components/expenses/ExpensesByCategory.js"],"names":["React","useState","useEffect","useTable","useSortBy","getAllExpenses","Card","Table","Button","Link","indexExpensesSuccess","indexExpensesFailure","ExpensesByCategory","props","expenses","setExpenses","order","setorder","user","msgAlert","then","res","data","heading","message","variant","catch","length","padTo2Digits","num","toString","padStart","formatDate","date","getMonth","getDate","getFullYear","join","expenseTableItems","totalRentExp","totalTranspExp","totalGroceryExp","totalUnnecessaryExp","totalNecessaryExp","totalOtherExp","totalInvestExp","forEach","expense","category","amount","map","Date","vendor","_id","id"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport {useTable, useSortBy } from 'react-table'\nimport { getAllExpenses } from '../../api/expenses'\nimport { Card, Table, Button } from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\nimport {indexExpensesSuccess, indexExpensesFailure} from '../shared/AutoDismissAlert/messages'\n\n// I'm going to declare a style object\n// this will be used to corral my cards\n// we can use basic CSS, but we have to use JS syntax\n\n\nconst ExpensesByCategory = (props) => {\n    const [expenses, setExpenses] = useState(null)\n    const [order, setorder] = useState('ASC')\n    const {user, msgAlert} = props\n\n    useEffect(() => {\n        getAllExpenses()\n            .then(res => {\n                setExpenses(res.data.expenses)\n            })\n            .then(() => {\n                msgAlert({\n                    heading: 'Found some expenses!',\n                    message: indexExpensesSuccess,\n                    variant: 'success',\n                })\n            })\n            .catch(() => {\n                msgAlert({\n                    heading: 'No expenses?!!',\n                    message: indexExpensesFailure,\n                    variant: 'danger',\n                })\n            })\n    }, [])\n\n    if (!expenses) {\n        return <p>loading...</p>\n    } else if (expenses.length === 0) {\n        return <p>no expenses yet, go add some</p>\n    }\n    const padTo2Digits = (num) => {\n        return num.toString().padStart(2, '0')\n    }\n        \n    const formatDate = (date) => {\n        return [\n            padTo2Digits(date.getMonth() + 1),\n            padTo2Digits(date.getDate()),\n            date.getFullYear(),\n        ].join('/');\n    }\n    let expenseTableItems\n    let totalRentExp = 0\n    let totalTranspExp = 0\n    let totalGroceryExp = 0\n    let totalUnnecessaryExp = 0\n    let totalNecessaryExp = 0\n    let totalOtherExp = 0\n    let totalInvestExp = 0\n    expenses.forEach(expense => {\n        if (expense.category === \"rent/utilities/phone\"){\n            totalRentExp += expense.amount\n        }\n        if (expense.category === \"car/transportation/gas\"){\n            totalTranspExp += expense.amount\n        }\n        if (expense.category === \"groceries\"){\n            totalGroceryExp += expense.amount\n        }\n        if (expense.category === \"personal necessary\"){\n            totalNecessaryExp += expense.amount\n        }\n        if (expense.category === \"personal unnecessary\"){\n            totalUnnecessaryExp += expense.amount\n        }\n        if (expense.category === \"other\"){\n            totalOtherExp += expense.amount\n        }\n        if (expense.category === \"investment\"){\n            totalInvestExp += expense.amount\n        }\n    })\n    if (expenses.length > 0) {\n        expenseTableItems = expenses.map(expense => (\n            // one method of styling, usually reserved for a single style\n            // we can use inline, just like in html\n                <tr key={expense.id}>\n                    <td>{formatDate(new Date(expense.date))}</td>\n                    <td>{expense.vendor}</td>\n                    <td>${expense.amount}</td>\n                    <td><Link to={`/expenses/${expense._id}`}>More info</Link></td>\n                </tr>\n            \n        ))\n    }\n        // const sorting = (col) => {\n        //     if (order === 'ASC'){\n        //         const sorted = [...expenses].sort((a, b) =>\n        //             a[col].toLowerCase() > b[col].toLowerCase() ? 1 : -1);\n        //         getAllExpenses(sorted)\n        //         setorder('DSC')\n        //     }\n        //     if (order === 'DSC'){\n        //         const sorted = [...expenses].sort((a, b) =>\n        //             a[col].toLowerCase() < b[col].toLowerCase() ? 1 : -1)\n        //         getAllExpenses(sorted)\n        //         setorder('ASC')\n        //     }\n        // }\n    return (\n        <>\n            <h3 className='page-title'>All the expenses</h3>\n            <Table striped bordered hover variant=\"dark\" id='myTable'>\n                <thead>\n                    <tr>\n                        <th>Date</th>\n                        {/* tried to make an onclick to sort by vendor name, not working */}\n                        {/* onClick={()=>sorting('vendor') */}\n                        <th>Vendor</th>\n                        <th>Amount</th>\n                        <th></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {expenseTableItems}\n                </tbody>\n            </Table>\n        \n            <div>Rent/Utilities/Phone: ${totalRentExp}</div>\n            <div>Car/Transportation/Gas: ${totalTranspExp}</div>\n            <div>Groceries: ${totalGroceryExp}</div>\n            <div>Personal Necessary: ${totalNecessaryExp}</div>\n            <div>Personal Unnecessary: ${totalUnnecessaryExp}</div>\n            <div>Other: ${totalOtherExp}</div>\n            <div>Investment: ${totalInvestExp}</div>\n        </>\n    )\n}\n\nexport default ExpensesByCategory\n\n "]},"metadata":{},"sourceType":"module"}